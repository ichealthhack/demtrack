function TabDemo
%   This function creates a figure with multiple Tabs.
%   The number of tabs can be changed and they are distributed evenly
%   across the top of the figure.  Content is provided for the first 5 tabs
%   to demo the program.  The demo uses the screen size to adjust the size
%   of the figure.  The program uses the ~ character for unused arguments,
%   so if you are not using 2009b, these should be changed to dummy
%   arguments (lines 209 and 233). guidata is set to the TabHandles cell
%   array and is used to pass all arguments and data to the functions.

%%   Set up some varables
%   First clear everything
        clear all
        clc
RESULTS = [];
%   Set Number of tabs and tab labels.  Make sure the number of tab labels
%   match the HumberOfTabs setting.
        NumberOfTabs = 10;               % Number of tabs to be generated
        TabLabels = {'Intro'; 'Main Menu'; 'Words'; 'Numbers'; 'Animal'; 'Check Words'; 'Check Numbers'; 'Performance'; 'Games'; 'Result'};
        if size(TabLabels,1) ~= NumberOfTabs
            errordlg('Number of tabs and tab labels must be the same','Setup Error');
            return
        end
        
%   Get user screen size
        SC = get(0, 'ScreenSize');
        MaxMonitorX = SC(3);
        MaxMonitorY = SC(4);
        
 %   Set the figure window size values
        MainFigScale = .6;          % Change this value to adjust the figure size
        MaxWindowX = round(MaxMonitorX*MainFigScale);
        MaxWindowY = round(MaxMonitorY*MainFigScale);
        XBorder = (MaxMonitorX-MaxWindowX)/2;
        YBorder = (MaxMonitorY-MaxWindowY)/2; 
        TabOffset = 0;              % This value offsets the tabs inside the figure.
        ButtonHeight = 40;
        PanelWidth = MaxWindowX-2*TabOffset+4;
        PanelHeight = MaxWindowY-ButtonHeight-2*TabOffset;
        ButtonWidth = round((PanelWidth-NumberOfTabs)/NumberOfTabs);
                
 %   Set the color varables.  
        White = [1  1  1];            % White - Selected tab color     
        BGColor = .98*White;           % Light Grey - Background color
        Green = [0.6 1 0.6];  
        Yellow = [1 1 0.6];
        Blue = [0.8 1 1];
%%   Create a figure for the tabs
        hTabFig = figure(...
            'Units', 'pixels',...
            'Toolbar', 'none',...
            'Position',[ XBorder, YBorder, MaxWindowX, MaxWindowY ],...
            'NumberTitle', 'off',...
            'Name', 'Tab Demo',...
            'MenuBar', 'none',...
            'Resize', 'off',...
            'DockControls', 'off',...
            'Color', White);
    
%%   Define a cell array for panel and pushbutton handles, pushbuttons labels and other data
    %   rows are for each tab + two additional rows for other data
    %   columns are uipanel handles, selection pushbutton handles, and tab label strings - 3 columns.
            TabHandles = cell(NumberOfTabs,3);
            TabHandles(:,3) = TabLabels(:,1);
    %   Add additional rows for other data
            TabHandles{NumberOfTabs+1,1} = hTabFig;         % Main figure handle
            TabHandles{NumberOfTabs+1,2} = PanelWidth;      % Width of tab panel
            TabHandles{NumberOfTabs+1,3} = PanelHeight;     % Height of tab panel
            TabHandles{NumberOfTabs+2,1} = 0;               % Handle to default tab 2 content(set later)
            TabHandles{NumberOfTabs+2,2} = White;           % Selected tab Color
            TabHandles{NumberOfTabs+2,3} = BGColor;         % Background color
            
%%   Build the Tabs
        for TabNumber = 1:NumberOfTabs
        % create a UIPanel   
            if TabNumber == 1 || TabNumber == 2 || TabNumber == 8 || TabNumber == 9 || TabNumber == 10 || TabNumber == 11
                TabHandles{TabNumber,1} = uipanel('Units', 'pixels', ...
                'Visible', 'off', ...
                'Backgroundcolor', Blue, ...
                'BorderWidth',1, ...
                'Position', [TabOffset TabOffset ...
                PanelWidth PanelHeight]);
            elseif TabNumber == 3 || TabNumber == 4
                TabHandles{TabNumber,1} = uipanel('Units', 'pixels', ...
                    'Visible', 'off', ...
                    'Backgroundcolor', Green, ...
                    'BorderWidth',1, ...
                    'Position', [TabOffset TabOffset ...
                    PanelWidth PanelHeight]);
            else
                TabHandles{TabNumber,1} = uipanel('Units', 'pixels', ...
                    'Visible', 'off', ...
                    'Backgroundcolor', Yellow, ...
                    'BorderWidth',1, ...
                    'Position', [TabOffset TabOffset ...
                    PanelWidth PanelHeight]);
            end
            

        % create a selection pushbutton
            TabHandles{TabNumber,2} = uicontrol('Style', 'pushbutton',...
                'Units', 'pixels', ...
                'BackgroundColor', BGColor, ...
                'Position', [TabOffset+(TabNumber-1)*ButtonWidth PanelHeight+TabOffset...
                    ButtonWidth ButtonHeight], ...          
                'String', TabHandles{TabNumber,3},...
                'HorizontalAlignment', 'center',...
                'FontName', 'arial',...
                'FontWeight', 'bold',...
                'FontSize', 10);

        end

%%   Define the callbacks for the Tab Buttons
%   All callbacks go to the same function with the additional argument being the Tab number
        for CountTabs = 1:NumberOfTabs
            set(TabHandles{CountTabs,2}, 'callback', ...
                {@TabSellectCallback, CountTabs});
        end

%%   Define content for the Open Image File Tab
    %   Open Image Pushbutton
%         uicontrol('Parent', TabHandles{1,1}, ...
%             'Units', 'pixels', ...
%             'Position', [round(PanelWidth/2)-100 2*ButtonHeight 200 ButtonHeight], ...
%             'String', 'Open Image File', ...
%             'Callback', @OpenImageCallback , ...
%             'Style', 'pushbutton',...
%             'HorizontalAlignment', 'center',...
%             'FontName', 'arial',...
%             'FontWeight', 'bold',...
%             'FontSize', 12);
%%%%MIRE
%% INTRO
        uicontrol('Parent', TabHandles{1,1}, ...
                'Units', 'pixels', ...
                'Position', [round(PanelWidth/2)-100 2*ButtonHeight 200 ButtonHeight], ...
                'String', 'BEGIN', ...
                'Callback', @GoNextTab, ...
                'Style', 'pushbutton',...
                'HorizontalAlignment', 'center',...
                'FontName', 'arial',...
                'FontWeight', 'bold',...
                'FontSize', 12);
            
        Intro = {'Welcome to DemTrack!'; ...
            'Are you ready to start?'; ...
            'Press the BEGIN button to start playing'};
        
    %   Display it
        uicontrol('Style', 'text',...
            'Position', [ round(PanelWidth/4) 3*ButtonHeight ...
                round(PanelWidth/2) round(PanelHeight/2) ],...
            'Parent', TabHandles{1,1}, ...
            'string', Intro,...
            'BackgroundColor', Blue,...
            'HorizontalAlignment', 'center',...
            'FontName', 'arial',...
            'FontWeight', 'bold',...
            'FontSize', 14);
        
brain_image = imread('brain.jpg');        
hImageAxes = axes('Parent', TabHandles{1,1}, ...
            'Units', 'pixels', ...
            'Position', [10 10 ...
                130 100]);
image(brain_image,'Parent', hImageAxes);
axis off

%% MAIN MENU
        uicontrol('parent', TabHandles{2,1}, ...
                'Style', 'pushbutton',...
                'Units', 'pixels', ...
                'Position', [round(PanelWidth/2)-100 6*ButtonHeight 200 1.5*ButtonHeight], ...
                'String', 'Tracking Test', ...
                'Callback', @GoNextTab2, ...
                'HorizontalAlignment', 'center',...
                'FontName', 'arial',...
                'FontWeight', 'bold',...
                'FontSize', 12);
        
        uicontrol('parent', TabHandles{2,1}, ...
            'Style', 'pushbutton',...
            'Units', 'pixels', ...
            'Position', [round(PanelWidth/2)-100 4*ButtonHeight 200 1.5*ButtonHeight], ...
            'String', 'Let''s Play!', ...
            'Callback', @GoEndTab, ...
            'HorizontalAlignment', 'center',...
            'FontName', 'arial',...
            'FontWeight', 'bold',...
            'FontSize', 12);
 
    %   Build the text for the first tab
        Intro = {'What do you want to do today?'};
        
    %   Display it
        uicontrol('Style', 'text',...
            'Position', [ round(PanelWidth/4) 9*ButtonHeight ...
                round(PanelWidth/2) round(PanelHeight/8) ],...
            'Parent', TabHandles{2,1}, ...
            'string', Intro,...
            'BackgroundColor', Blue,...
            'HorizontalAlignment', 'center',...
            'FontName', 'arial',...
            'FontWeight', 'bold',...
            'FontSize', 14);
        
brain_image = imread('brain.jpg');        
hImageAxes = axes('Parent', TabHandles{2,1}, ...
            'Units', 'pixels', ...
            'Position', [10 10 ...
                130 100]);
image(brain_image,'Parent', hImageAxes);
axis off
%         
%% WORDS
        uicontrol('Parent', TabHandles{3,1}, ...
                'Units', 'pixels', ...
                'Position', [round(PanelWidth/2)-100 1*ButtonHeight 200 ButtonHeight], ...
                'String', 'Next', ...
                'Callback', @GoNextTab1, ...
                'Style', 'pushbutton',...
                'HorizontalAlignment', 'center',...
                'FontName', 'arial',...
                'FontWeight', 'bold',...
                'FontSize', 12);
 
    %   Build the text for the first tab
        Intro = {'Memorise these words'};
        Intro2 = {' ';...
            'Elephant';...
            ' ';...
            'Cat';...
            ' ';...
            'Carrot';...  
            ' ';...
            'Button';};
        
    %   Display it
        uicontrol('Style', 'text',...
            'Position', [ round(PanelWidth/4) 4*ButtonHeight ...
                round(PanelWidth/2) round(PanelHeight/2) ],...
            'Parent', TabHandles{3,1}, ...
            'string', Intro,...
            'BackgroundColor', Green,...
            'HorizontalAlignment', 'center',...
            'FontName', 'arial',...
            'FontWeight', 'bold',...
            'FontSize', 14);
        uicontrol('Style', 'text',...
            'Position', [ round(PanelWidth/4) 2.5*ButtonHeight ...
                round(PanelWidth/2) round(PanelHeight/2) ],...
            'Parent', TabHandles{3,1}, ...
            'string', Intro2,...
            'BackgroundColor', Green,...
            'HorizontalAlignment', 'center',...
            'FontName', 'arial',...
            'FontWeight', 'bold',...
            'FontSize', 16);
        
brain_image = imread('brain.jpg');        
hImageAxes = axes('Parent', TabHandles{3,1}, ...
            'Units', 'pixels', ...
            'Position', [10 10 ...
                130 100]);
image(brain_image,'Parent', hImageAxes);
axis off

%% NUMBERS

  uicontrol('Parent', TabHandles{4,1}, ...
                'Units', 'pixels', ...
                'Position', [round(PanelWidth/2)-100 1*ButtonHeight 200 ButtonHeight], ...
                'String', 'Next', ...
                'Callback', @GoNextTab3 , ...
                'Style', 'pushbutton',...
                'HorizontalAlignment', 'center',...
                'FontName', 'arial',...
                'FontWeight', 'bold',...
                'FontSize', 12);
 
    %   Build the text for the first tab
        Numbers = {'Memorise the following sequence of numbers'};
        Numbers2 = {'2 4 6 8 10'};
 
        
    %   Display it
        uicontrol('Style', 'text',...
            'Position', [ round(PanelWidth/4) 4*ButtonHeight ...
                round(PanelWidth/2) round(PanelHeight/2) ],...
            'Parent', TabHandles{4,1}, ...
            'string', Numbers,...
            'BackgroundColor', Green,...
            'HorizontalAlignment', 'center',...
            'FontName', 'arial',...
            'FontWeight', 'bold',...
            'FontSize', 14);
        uicontrol('Style', 'text',...
            'Position', [ round(PanelWidth/4) 2*ButtonHeight ...
                round(PanelWidth/2) round(PanelHeight/2) ],...
            'Parent', TabHandles{4,1}, ...
            'string', Numbers2,...
            'BackgroundColor', Green,...
            'HorizontalAlignment', 'center',...
            'FontName', 'arial',...
            'FontWeight', 'bold',...
            'FontSize', 20);

brain_image = imread('brain.jpg');        
hImageAxes = axes('Parent', TabHandles{4,1}, ...
            'Units', 'pixels', ...
            'Position', [10 10 ...
                130 100]);
image(brain_image,'Parent', hImageAxes);
axis off
        
%% ANIMALS

uicontrol('Parent', TabHandles{5,1}, ...
                'Units', 'pixels', ...
                'Position', [round(PanelWidth/2)-100 1.5*ButtonHeight 200 ButtonHeight], ...
                'String', 'Next', ...
                'Callback', @ansbe4nexttab, ...
                'Style', 'pushbutton',...
                'HorizontalAlignment', 'center',...
                'FontName', 'arial',...
                'FontWeight', 'bold',...
                'FontSize', 12);
 
    %   Build the text for the first tab
        Intro = {'What''s the name of this animal?'};
        
    %   Display it
        uicontrol('Style', 'text',...
            'Position', [ round(PanelWidth/4) 8*ButtonHeight ...
                round(PanelWidth/2) round(PanelHeight/8) ],...
            'Parent', TabHandles{5,1}, ...
            'string', Intro,...
            'BackgroundColor', Yellow,...
            'HorizontalAlignment', 'center',...
            'FontName', 'arial',...
            'FontWeight', 'bold',...
            'FontSize', 14);
        
tiger_image = imread('tiger.jpg');        
hImageAxes = axes('Parent', TabHandles{5,1}, ...
            'Units', 'pixels', ...
            'Position', [round(PanelWidth/2)+100 PanelHeight/4 ...
                250 200]);
image(tiger_image,'Parent', hImageAxes);
axis off

c(1) = uicontrol('style','checkbox','Parent',TabHandles{5,1},'units','pixels',...
        'BackgroundColor', Yellow,'position',[round(PanelWidth/4),round(PanelHeight/2),round(PanelWidth/4),15],'string','Cat',  'FontName', 'arial',...
    'FontWeight', 'bold',...
    'FontSize', 14);
c(2) = uicontrol('style','checkbox','Parent',TabHandles{5,1},'units','pixels',...
        'BackgroundColor', Yellow,'position',[round(PanelWidth/4),round(PanelHeight/2)-20,round(PanelWidth/4),15],'string','Tiger', 'FontName', 'arial',...
    'FontWeight', 'bold',...
    'FontSize', 14);  
c(3) = uicontrol('style','checkbox','Parent',TabHandles{5,1},'units','pixels',...
    'BackgroundColor', Yellow,'position',[round(PanelWidth/4),round(PanelHeight/2)-40,round(PanelWidth/4),15],'string','Lion', 'FontName', 'arial',...
'FontWeight', 'bold',...
'FontSize', 14); 

ANS= uicontrol('Style', 'text',...
        'Position', [200,5,round(PanelWidth/2),20],...
        'Parent', TabHandles{5,1}, ...
        'string', '',...
        'BackgroundColor', Yellow,...
        'HorizontalAlignment', 'center',...
        'FontName', 'arial',...
        'FontWeight', 'bold',...
        'FontSize', 14);
qnum = 1;

function ansbe4nexttab(varargin)
     vals = get(c,'Value');
     checked = find([vals{:}]);
     if isempty(checked)
        answ= 'Please, select one option before clicking Next'; 
        set(ANS, 'string', answ);
     else
         if length(checked)>1
            answ= 'Please, select ONLY one option. Try again.';
               set(ANS, 'string', answ);
         else
             if checked==2
                 RESULTS(qnum)=1%RIGHT
                 %answ='CORRECT';
             elseif (checked==1)||(checked==3)
                 %answ='FALSE';
                 RESULTS(qnum)=0%WRONG
             end

%               tabnum=3;
          qnum=2; %next question number
          TabSellectCallback(0,0,6);

         end

     end

end
brain_image = imread('brain.jpg');        
hImageAxes = axes('Parent', TabHandles{4,1}, ...
            'Units', 'pixels', ...
            'Position', [10 10 ...
                130 100]);
image(brain_image,'Parent', hImageAxes);
axis off

%% CHECK WORDS

uicontrol('Parent', TabHandles{6,1}, ...
                'Units', 'pixels', ...
                'Position', [round(PanelWidth/2)-100 1.5*ButtonHeight 200 ButtonHeight], ...
                'String', 'Next', ...
                'Callback', @ansbe4nexttab2, ...
                'Style', 'pushbutton',...
                'HorizontalAlignment', 'center',...
                'FontName', 'arial',...
                'FontWeight', 'bold',...
                'FontSize', 12);
 
    %   Build the text for the first tab
        Intro = {'Before you memorised some words. Do you remember them?'};
        
    %   Display it
        uicontrol('Style', 'text',...
            'Position', [ round(PanelWidth/4) 8*ButtonHeight ...
                round(PanelWidth/2) round(PanelHeight/8) ],...
            'Parent', TabHandles{6,1}, ...
            'string', Intro,...
            'BackgroundColor', Yellow,...
            'HorizontalAlignment', 'center',...
            'FontName', 'arial',...
            'FontWeight', 'bold',...
            'FontSize', 14);

c1(1) = uicontrol('style','checkbox','Parent',TabHandles{6,1},'units','pixels',...
        'BackgroundColor', Yellow,'position',[round(PanelWidth/4),round(PanelHeight/2),round(PanelWidth/2),15],'string','Cat   Lion   Elephant   Button',  'FontName', 'arial',...
    'FontWeight', 'bold',...
    'FontSize', 14);
c1(2) = uicontrol('style','checkbox','Parent',TabHandles{6,1},'units','pixels',...
        'BackgroundColor', Yellow,'position',[round(PanelWidth/4),round(PanelHeight/2)-20,round(PanelWidth/2),15],'string','Carrot   Cat   Elephant   Button', 'FontName', 'arial',...
    'FontWeight', 'bold',...
    'FontSize', 14);  
c1(3) = uicontrol('style','checkbox','Parent',TabHandles{6,1},'units','pixels',...
    'BackgroundColor', Yellow,'position',[round(PanelWidth/4),round(PanelHeight/2)-40,round(PanelWidth/2),15],'string','Elephant   Carrot   Lion   Button', 'FontName', 'arial',...
'FontWeight', 'bold',...
'FontSize', 14); 

ANS1= uicontrol('Style', 'text',...
        'Position', [200,5,round(PanelWidth/2),20],...
        'Parent', TabHandles{6,1}, ...
        'string', '',...
        'BackgroundColor', Yellow,...
        'HorizontalAlignment', 'center',...
        'FontName', 'arial',...
        'FontWeight', 'bold',...
        'FontSize', 14);

function ansbe4nexttab2(varargin)
     vals = get(c1,'Value');
     checked = find([vals{:}]);
     if isempty(checked)
        answ= 'Please, select one option before clicking Next'; 
        set(ANS1, 'string', answ);
     else
         if length(checked)>1
            answ= 'Please, select ONLY one option. Try again.';
               set(ANS1, 'string', answ);
         else
             if checked==2
                 RESULTS(qnum)=1%RIGHT
                 %answ='CORRECT';
             elseif (checked==1)||(checked==3)
                 %answ='FALSE';
                 RESULTS(qnum)=0%WRONG
             end

%               tabnum=3;
          qnum = 3;
          TabSellectCallback(0,0,7);

         end

     end

end
brain_image = imread('brain.jpg');        
hImageAxes = axes('Parent', TabHandles{4,1}, ...
            'Units', 'pixels', ...
            'Position', [10 10 ...
                130 100]);
image(brain_image,'Parent', hImageAxes);
axis off

%% CHECK NUMBERS

uicontrol('Parent', TabHandles{7,1}, ...
                'Units', 'pixels', ...
                'Position', [round(PanelWidth/2)-100 1.5*ButtonHeight 200 ButtonHeight], ...
                'String', 'Next', ...
                'Callback', @ansbe4nexttab3, ...
                'Style', 'pushbutton',...
                'HorizontalAlignment', 'center',...
                'FontName', 'arial',...
                'FontWeight', 'bold',...
                'FontSize', 12);
 
    %   Build the text for the first tab
        Intro = {'And now, which sequence of numbers is equal to the one you saw before?'};
        
    %   Display it
        uicontrol('Style', 'text',...
            'Position', [ round(PanelWidth/4) 8*ButtonHeight ...
                round(PanelWidth/2) round(PanelHeight/8) ],...
            'Parent', TabHandles{7,1}, ...
            'string', Intro,...
            'BackgroundColor', Yellow,...
            'HorizontalAlignment', 'center',...
            'FontName', 'arial',...
            'FontWeight', 'bold',...
            'FontSize', 14);
        
c2(1) = uicontrol('style','checkbox','Parent',TabHandles{7,1},'units','pixels',...
        'BackgroundColor', Yellow,'position',[round(PanelWidth/4),round(PanelHeight/2),round(PanelWidth/2),15],'string','2  6  6  8  10',  'FontName', 'arial',...
    'FontWeight', 'bold',...
    'FontSize', 14);
c2(2) = uicontrol('style','checkbox','Parent',TabHandles{7,1},'units','pixels',...
        'BackgroundColor', Yellow,'position',[round(PanelWidth/4),round(PanelHeight/2)-20,round(PanelWidth/2),15],'string','2  4  6  8  10', 'FontName', 'arial',...
    'FontWeight', 'bold',...
    'FontSize', 14);  
c2(3) = uicontrol('style','checkbox','Parent',TabHandles{7,1},'units','pixels',...
    'BackgroundColor', Yellow,'position',[round(PanelWidth/4),round(PanelHeight/2)-40,round(PanelWidth/2),15],'string','12  4  6  8  10', 'FontName', 'arial',...
'FontWeight', 'bold',...
'FontSize', 14); 

ANS2= uicontrol('Style', 'text',...
        'Position', [200,5,round(PanelWidth/2),20],...
        'Parent', TabHandles{7,1}, ...
        'string', '',...
        'BackgroundColor', Yellow,...
        'HorizontalAlignment', 'center',...
        'FontName', 'arial',...
        'FontWeight', 'bold',...
        'FontSize', 14);

function ansbe4nexttab3(varargin)
     vals = get(c2,'Value');
     checked = find([vals{:}]);
     if isempty(checked)
        answ= 'Please, select one option before clicking Next'; 
        set(ANS2, 'string', answ);
     else
         if length(checked)>1
            answ= 'Please, select ONLY one option. Try again.';
               set(ANS2, 'string', answ);
         else
             if checked==2
                 RESULTS(qnum)=1%RIGHT
                 %answ='CORRECT';
             elseif (checked==1)||(checked==3)
                 %answ='FALSE';
                 RESULTS(qnum)=0%WRONG
             end

%               tabnum=3;
          qnum=4; %next question number
          TabSellectCallback(0,0,8);

         end

     end

end
brain_image = imread('brain.jpg');        
hImageAxes = axes('Parent', TabHandles{4,1}, ...
            'Units', 'pixels', ...
            'Position', [10 10 ...
                130 100]);
image(brain_image,'Parent', hImageAxes);
axis off

%% Performance and Results

uicontrol('Parent', TabHandles{8,1}, ...
            'Units', 'pixels', ...
            'Position', [round(PanelWidth/2)-100 1*ButtonHeight 200 ButtonHeight], ...
            'String', 'Next', ...
            'Callback', @GoNextTab4 , ...
            'Style', 'pushbutton',...
            'HorizontalAlignment', 'center',...
            'FontName', 'arial',...
            'FontWeight', 'bold',...
            'FontSize', 12);

%   Build the text for the first tab
    Numbers = {'You''ve finished the test!'};
    Numbers1 = {'TOTAL SCORE'; ...
        '18/30'};

%   Display it
    uicontrol('Style', 'text',...
        'Position', [ round(PanelWidth/2)-440 7*ButtonHeight ...
            round(PanelWidth/4) round(PanelHeight/8) ],...
        'Parent', TabHandles{8,1}, ...
        'string', Numbers,...
        'BackgroundColor', Blue,...
        'HorizontalAlignment', 'center',...
        'FontName', 'arial',...
        'FontWeight', 'bold',...
        'FontSize', 14);

    uicontrol('Style', 'text',...
        'Position', [ round(PanelWidth/2)-440 6*ButtonHeight ...
            round(PanelWidth/4) round(PanelHeight/8) ],...
        'Parent', TabHandles{8,1}, ...
        'string', Numbers1,...
        'BackgroundColor', Blue,...
        'HorizontalAlignment', 'center',...
        'FontName', 'arial',...
        'FontWeight', 'bold',...
        'FontSize', 16);
    
chart_image = imread('chart.JPG');        
hImageAxes1 = axes('Parent', TabHandles{8,1}, ...
            'Units', 'pixels', ...
            'Position', [round(PanelWidth/2)-180 PanelHeight/4 ...
                600 300]);
image(chart_image,'Parent', hImageAxes1);
axis off
brain_image = imread('brain.jpg');        
hImageAxes = axes('Parent', TabHandles{4,1}, ...
            'Units', 'pixels', ...
            'Position', [10 10 ...
                130 100]);
image(brain_image,'Parent', hImageAxes);
axis off

%% Games
       uicontrol('parent', TabHandles{9,1}, ...
                'Style', 'pushbutton',...
                'Units', 'pixels', ...
                'Position', [round(PanelWidth/2)-100 6.5*ButtonHeight 200 1.5*ButtonHeight], ...
                'String', 'Colour Mix', ...
                'Callback', @GoNextTab5, ...
                'HorizontalAlignment', 'center',...
                'FontName', 'arial',...
                'FontWeight', 'bold',...
                'FontSize', 12);
        
        uicontrol('parent', TabHandles{9,1}, ...
            'Style', 'pushbutton',...
            'Units', 'pixels', ...
            'Position', [round(PanelWidth/2)-100 4.5*ButtonHeight 200 1.5*ButtonHeight], ...
            'String', 'Sequences', ...
            'Callback', @GoNextTab5, ...
            'HorizontalAlignment', 'center',...
            'FontName', 'arial',...
            'FontWeight', 'bold',...
            'FontSize', 12);
        
        uicontrol('parent', TabHandles{9,1}, ...
            'Style', 'pushbutton',...
            'Units', 'pixels', ...
            'Position', [round(PanelWidth/2)-100 2.5*ButtonHeight 200 1.5*ButtonHeight], ...
            'String', 'Name the objects', ...
            'Callback', @GoNextTab5, ...
            'HorizontalAlignment', 'center',...
            'FontName', 'arial',...
            'FontWeight', 'bold',...
            'FontSize', 12);
 
    %   Build the text for the first tab
        Intro = {'Try our game suggestions'; ...
            'to improve your score!'};
        
    %   Display it
        uicontrol('Style', 'text',...
            'Position', [ round(PanelWidth/4) 8*ButtonHeight ...
                round(PanelWidth/2) round(PanelHeight/4) ],...
            'Parent', TabHandles{9,1}, ...
            'string', Intro,...
            'BackgroundColor', Blue,...
            'HorizontalAlignment', 'center',...
            'FontName', 'arial',...
            'FontWeight', 'bold',...
            'FontSize', 14);
        

brain_image = imread('brain.jpg');        
hImageAxes = axes('Parent', TabHandles{4,1}, ...
            'Units', 'pixels', ...
            'Position', [10 10 ...
                130 100]);
image(brain_image,'Parent', hImageAxes);
axis off
%% Results

%         uicontrol('parent', TabHandles{10,1}, ...
%             'Style', 'pushbutton',...
%             'Units', 'pixels', ...
%             'Position', [round(PanelWidth/2)-100 1*ButtonHeight 200 ButtonHeight], ...
%             'String', 'FINISH', ...
%             'Callback', @GoNextTab6, ...
%             'HorizontalAlignment', 'center',...
%             'FontName', 'arial',...
%             'FontWeight', 'bold',...
%             'FontSize', 12);
%  
%     %   Build the text for the first tab
%         Intro = {'Score to beat:  2830 points'};
%         variable = 2910;
%         Intro1 = {strcat('TOTAL SCORE:    ',num2str(variable),' points!')};
%         
%         Intro2 = {'You did better than last time!'};
%         
%     %   Display it
%         uicontrol('Style', 'text',...
%             'Position', [ round(PanelWidth/4)-350 8*ButtonHeight ...
%                 round(PanelWidth/2) round(PanelHeight/4) ],...
%             'Parent', TabHandles{10,1}, ...
%             'string', Intro,...
%             'BackgroundColor', Blue,...
%             'HorizontalAlignment', 'center',...
%             'FontName', 'arial',...
%             'FontWeight', 'bold',...
%             'FontSize', 10);
%             
%          uicontrol('Style', 'text',...
%             'Position', [ round(PanelWidth/4)-320 3*ButtonHeight ...
%                 round(PanelWidth/2)-20 round(PanelHeight/4) ],...
%             'Parent', TabHandles{10,1}, ...
%             'string', Intro1,...
%             'BackgroundColor', Blue,...
%             'HorizontalAlignment', 'center',...
%             'FontName', 'arial',...
%             'FontWeight', 'bold',...
%             'FontSize', 14);
%             
%          uicontrol('Style', 'text',...
%             'Position', [ round(PanelWidth/4)-320 2*ButtonHeight ...
%                 round(PanelWidth/2)-20 round(PanelHeight/4) ],...
%             'Parent', TabHandles{10,1}, ...
%             'string', Intro2,...
%             'BackgroundColor', Blue,...
%             'HorizontalAlignment', 'center',...
%             'FontName', 'arial',...
%             'FontWeight', 'bold',...
%             'FontSize', 12);
% brain_image = imread('brain.jpg');        
% hImageAxes = axes('Parent', TabHandles{4,1}, ...
%             'Units', 'pixels', ...
%             'Position', [10 10 ...
%                 130 100]);
% image(brain_image,'Parent', hImageAxes);
% axis off
uicontrol('Parent', TabHandles{10,1}, ...
                'Units', 'pixels', ...
                'Position', [round(PanelWidth/2)-100 1.5*ButtonHeight 200 ButtonHeight], ...
                'String', 'Next', ...
                'Callback', @ansbe4nexttab4, ...
                'Style', 'pushbutton',...
                'HorizontalAlignment', 'center',...
                'FontName', 'arial',...
                'FontWeight', 'bold',...
                'FontSize', 12);
 
    %   Build the text for the first tab
        Intro = {'Push the button of the appropiate colour. Not the Word.'};
        
    %   Display it
        uicontrol('Style', 'text',...
            'Position', [ round(PanelWidth/4) 8*ButtonHeight ...
                round(PanelWidth/2) round(PanelHeight/8) ],...
            'Parent', TabHandles{10,1}, ...
            'string', Intro,...
            'BackgroundColor', Blue,...
            'HorizontalAlignment', 'center',...
            'FontName', 'arial',...
            'FontWeight', 'bold',...
            'FontSize', 14);
        
            %   WORD in colour disp
        uicontrol('Style', 'text',...
            'Position', [round(PanelWidth/2)-35,round(PanelHeight/2),70,40],...
            'Parent', TabHandles{10,1}, ...
            'string','Yellow',...
            'BackgroundColor', Green,...
            'HorizontalAlignment', 'center',...
            'FontName', 'arial',...
            'FontWeight', 'bold',...
            'FontSize', 14);
        
        uicontrol('Parent', TabHandles{10,1}, ...
                'Units', 'pixels', ...
                'Position', [round(PanelWidth/2)-100 1.5*ButtonHeight 200 ButtonHeight], ...
                'String', 'FINISH', ...
                'Callback', @ansbe4nexttab4, ...
                'Style', 'pushbutton',...
                'HorizontalAlignment', 'center',...
                'FontName', 'arial',...
                'FontWeight', 'bold',...
                'FontSize', 12);
            

uicontrol('Style', 'text',...
        'Position', [40,5,70,20],...
        'Parent', TabHandles{10,1}, ...
        'string', 'SCORE:',...
        'BackgroundColor', Blue,...
        'HorizontalAlignment', 'center',...
        'FontName', 'arial',...
        'FontWeight', 'bold',...
        'FontSize', 14);
    
ANS3= uicontrol('Style', 'text',...
        'Position', [150,5,round(PanelWidth/8),20],...
        'Parent', TabHandles{10,1}, ...
        'string', '2910',...
        'BackgroundColor', Blue,...
        'HorizontalAlignment', 'center',...
        'FontName', 'arial',...
        'FontWeight', 'bold',...
        'FontSize', 14);

    
       uicontrol('style','pushbutton','Parent',TabHandles{10,1},'units','pixels',...
                'position',[250,round(PanelHeight/2)-100,70,40],'string','White',...
                'callback',@click1);
       uicontrol('style','pushbutton','Parent',TabHandles{10,1},'units','pixels',...
                'position',[320,round(PanelHeight/2)-100,70,40],'string','Black',...
                'callback',@click2);
       uicontrol('style','pushbutton','Parent',TabHandles{10,1},'units','pixels',...
                'position',[390,round(PanelHeight/2)-100,70,40],'string','Blue',...
                'callback',@click3);
       uicontrol('style','pushbutton','Parent',TabHandles{10,1},'units','pixels',...
                'position',[460,round(PanelHeight/2)-100,70,40],'string','Green',...
                'callback',@click4);
       uicontrol('style','pushbutton','Parent',TabHandles{10,1},'units','pixels',...
                'position',[530,round(PanelHeight/2)-100,70,40],'string','Red',...
                'callback',@click5);
       uicontrol('style','pushbutton','Parent',TabHandles{10,1},'units','pixels',...
                'position',[600,round(PanelHeight/2)-100,70,40],'string','Yellow',...
                'callback',@click6);
            
%      score=0;    
     COLOUR='Green';
    function click1(varargin)
       if strcmp(COLOUR,'White')
        score=score+1;
        set(ANS3,'string', num2string(score))
       end
    end

    function click2(varagin)
       if strcmp(COLOUR,'Black')
        score=score+1;
        set(ANS3,'string', num2string(score))
       end
    end
    function click3(varagin)
       if strcmp(COLOUR,'Blue')
        score=score+1;
        
        set(ANS3,'string', num2string(score))
       end
    end
    function click4(varagin)
       if strcmp(COLOUR,'Green')
        score=score+1;
        val=num2string(score);
        set(ANS3,'string', val)
       end
    end
    function click5(varagin)
       if strcmp(COLOUR,'Red')
        score=score+1;
        set(ANS3,'string', num2string(score))
       end
    end
    function click6(varagin)
       if strcmp(COLOUR,'Yellow')
        score=score+1;
        set(ANS3,'string', num2string(score))
       end
    end
       
    

% go next
function ansbe4nexttab4(varargin)
    
    TabSellectCallback(0,0,11);

end
%%   Save the TabHandles in guidata
        guidata(hTabFig,TabHandles);

%%   Make Tab 1 active
        TabSellectCallback(0,0,1);

end
%%   Callback for Tab Selection
function TabSellectCallback(~,~,SelectedTab)
%   All tab selection pushbuttons are greyed out and uipanels are set to
%   visible off, then the selected panel is made visible and it's selection
%   pushbutton is highlighted.

    %   Set up some varables
        TabHandles = guidata(gcf);
        NumberOfTabs = size(TabHandles,1)-2;
        White = TabHandles{NumberOfTabs+2,2};            % White      
        BGColor = TabHandles{NumberOfTabs+2,3};          % Light Grey
        
    %   Turn all tabs off
        for TabCount = 1:NumberOfTabs
            set(TabHandles{TabCount,1}, 'Visible', 'off');
            set(TabHandles{TabCount,2}, 'BackgroundColor', BGColor);
        end
        
    %   Enable the selected tab
        set(TabHandles{SelectedTab,1}, 'Visible', 'on');        
        set(TabHandles{SelectedTab,2}, 'BackgroundColor', White);

end

%% Movement from tab to tab
    function GoNextTab(~,~)
        TabSellectCallback(0,0,2);
    end
    
    function GoNextTab1(~,~)
        TabSellectCallback(0,0,4);
    end
    
    function GoNextTab2(~,~)
        TabSellectCallback(0,0,3);
    end
    
    function GoNextTab3(~,~)
        TabSellectCallback(0,0,5);
    end

    function GoEndTab(~,~)
        TabSellectCallback(0,0,9);
    end
    
    function GoNextTab4(~,~)
        TabSellectCallback(0,0,9);
    end
    
    function GoNextTab5(~,~)
        TabSellectCallback(0,0,10);
    end
    
    function GoNextTab6(~,~)
        TabSellectCallback(0,0,10);
    end



    
%% IRENE
    function varargout = Memory1(varargin)
% Memory1 MATLAB code for Memory1.fig
%      Memory1, by itself, creates a new Memory1 or raises the existing
%      singleton*.
%
%      H = Memory1 returns the handle to a new Memory1 or the handle to
%      the existing singleton*.
%
%      Memory1('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in Memory1.M with the given input arguments.
%
%      Memory1('Property','Value',...) creates a new Memory1 or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before Memory1_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to Memory1_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help Memory1

% Last Modified by GUIDE v2.5 17-Mar-2018 17:32:13

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @Memory1_OpeningFcn, ...
                   'gui_OutputFcn',  @Memory1_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT
    end


% --- Executes just before Memory1 is made visible.
function Memory1_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to Memory1 (see VARARGIN)

% Choose default command line output for Memory1
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);

% UIWAIT makes Memory1 wait for user response (see UIRESUME)
% uiwait(handles.figure1);
end


% --- Outputs from this function are returned to the command line.
function varargout = Memory1_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;
end


% --- Executes on button press in pushbutton1.
function pushbutton1_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
end

function memoryGame(maxNum,imNames)
% One- or two-person game of "Memory", using randomized image pairs. Use
% default (demo) images, or specify your own.
%
% SYNTAX:
% memoryGame
%    Default settings (36 MathWorks-provided images)
%
% memoryGame(maxNum)
%    Create a new game with (even integer) maxNum cards. DEFAULT: 36
%    (Note: default images are TIFF images in Image Processing Toolbox demo
%    directory. Currently there are 28 images in the folder, so maxNum
%    cannot exceed 56 unless imNames is specified explicitly.)
%
% memoryGame(...,imNames)
%   Optionally specify the names of the images you want to use. maxNum
%   cannot exceed 2*numel(imNames).
%   Specify imNames as either a cell array of images (using full pathnames
%   if they are not on the current path); or a structure having fields
%   'pathname' and 'extension'. 
%
% % EXAMPLES:
% % 1)
% memoryGame(36)
% 
% % 2)
% ims = {'cameraman.tif','rice.png','pout.tif'};
% memoryGame(6,ims)
% 
% % 3)
% imNames.pathname = fullfile(matlabroot,'toolbox\matlab\demos');
% imNames.extension = 'jpg';
% memoryGame(10,imNames)
%
% Brett Shoelson, PhD
% brett.shoelson@mathworks.com
% 12/21/2014

% Copyright 2014 The MathWorks, Inc.

if nargin == 0 || isempty(maxNum)
	maxNum = 36;
end
if nargin < 2
	imLoc = fullfile(matlabroot,'toolbox','images','imdata');
	imNames = dir(fullfile(imLoc,'*.png'));
	imNames = {imNames.name};
	imNames = imNames(randperm(numel(imNames)));
elseif nargin > 2
	error('memoryGame: Improper number of input arguments');
end

if isstruct(imNames)
	if ~isfield(imNames,'pathname') || ~isfield(imNames,'extension')
		error('memoryGame: If you specify a structure, it must have fields ''pathname'' and ''extension''.');
	end
	if isempty(strfind(imNames.extension,'.'))
		imNames.extension = ['.' imNames.extension];
	end
	if isempty(strfind(imNames.extension,'*'))
		imNames.extension = ['*' imNames.extension];
	end
	pn = imNames.pathname;
	imNames = dir(fullfile(imNames.pathname,imNames.extension));
	imNames = {imNames.name};
	imNames = imNames(randperm(numel(imNames)));
	myfunc = @(x) fullfile(pn,x);
	imNames = cellfun(myfunc,imNames,'UniformOutput',false);
end
if isodd(maxNum)
	disp('Using the next highest even number!')
	maxNum = maxNum + 1;
end
if numel(imNames)> maxNum/2
	imNames = imNames(1:ceil(maxNum/2));
elseif maxNum/2 > numel(imNames)
	disp(['Unless you specify more images by name, I only have ' num2str(numel(imNames)) ' images to work with!'])
end
%
singleton = true;
if singleton
	delete(findall(groot,'tag','memoryGame'));
end
%create a square, undocked figure centered on the screen
ss = get(groot,'screensize');
sz = round(min(ss(3:4))*0.85);
f = figure('windowstyle','normal',...
	'units','pixels',...
	'tag','memoryGame',...
	'menubar','none',...
	'position',[(ss(3)-sz)/2 (ss(4)-sz)/2 sz sz]);

activeButtonShowsImage = [];
restart = [];
imNames = repmat(imNames,1,2);
imNames = imNames(randperm(numel(imNames)));
[~,~,imnums] = unique(imNames);
arraysize = [ceil(sqrt(numel(imNames))) ceil(sqrt(numel(imNames)))];

% Array of buttons
[hobjpos,hobjdim] = distributeObjects(arraysize(2),0,1,0);
hobjpos = repmat(hobjpos,arraysize(2),1)';
bottomPos = 0.1;
topPos = 0.95;
[vobjpos,vobjdim] = distributeObjects(arraysize(1),bottomPos,topPos,0);
vobjpos = repmat(fliplr(vobjpos),arraysize(2),1);

[allButtons,bigTitle,pb] = deal([]);
isTwoPlayer = false;
playerOnesTurn = true;
%playAgain;
playAgainButton = uicontrol('style','pushbutton',...
	'units','normalized',...
	'position',[0 0 0.4 bottomPos],...
	'string','Play Again!',...
	'fontsize',18,...
	'foregroundcolor',[0 0.7 0],...
	'callback',@playAgain);
pauseval = 2;
pausevalSlider = sliderPanel(...
	'Parent',f,...
	'Title','Pause Value',...
	'Position',[0.4 0 0.2 bottomPos],...
	'Min',0.5,...
	'Max',8.5,...
	'Value',pauseval,...
	'Sliderstep',[1 1]/8,...
	'Numberformat','%0.1f',...
	'Callback',@changePauseval);
beepon = uicontrol('style','checkbox',...
	'units','normalized',...
	'position',[0.6 2*bottomPos/3 0.2 bottomPos/3],...
	'string','Beep On',...
	'fontsize',9,...
	'value',1);
onePlayerTwoPlayer = uibuttongroup(...
	'units','normalized',...
	'position',[0.6 0 0.4 2*bottomPos/3],...
	'fontsize',9,...
	'SelectionChangedFcn',@changeNumberOfPlayers);
onePlayer = uicontrol(onePlayerTwoPlayer,...
	'Style','radiobutton',...
	'Units','normalized',...
	'String','1 Player',...
	'Position',[0.05 0.55 0.3 0.35],...
	'HandleVisibility','off');
twoPlayer = uicontrol(onePlayerTwoPlayer,...
	'Style','radiobutton',...
	'Units','normalized',...
	'String','2 Players',...
	'Position',[0.05 0.1 0.3 0.35],...
	'HandleVisibility','off');
p1Score = 0;
p1ScoreText = uicontrol(onePlayerTwoPlayer,...
	'Style','Text',...
	'Units','normalized',...
	'String',['Player 1 Score: ' num2str(p1Score)],...
	'Position',[0.4 0.55 0.55 0.35],...
	'fontsize',9,...
	'fontweight','bold',...
	'foregroundcolor','r',...
	'visible','off');
p2Score = 0;
p2ScoreText = uicontrol(onePlayerTwoPlayer,...
	'Style','Text',...
	'Units','normalized',...
	'String',['Player 2 Score: ' num2str(p2Score)],...
	'Position',[0.4 0.1 0.55 0.35],...
	'fontsize',9,...
	'fontweight','bold',...
	'foregroundcolor','b',...
	'visible','off');
playAgain

	function changeNumberOfPlayers(varargin)
		playAgain
		if strcmp(get(get(onePlayerTwoPlayer,'SelectedObject'),'string'),'2 Players')
			set([p1ScoreText,p2ScoreText],'visible','on');
			set(bigTitle,'string','PLAYER 1, it''s your turn!','foregroundcolor','r')
			isTwoPlayer = true;
		else
			set([p1ScoreText,p2ScoreText],'visible','off');
			isTwoPlayer = false;
		end
	end %changeNumberOfPlayers

	function changePauseval(obj,varargin)
		pauseval = get(obj,'value');
	end %changePauseval

	function k=isodd(x)
		if nargin ~=1|~strcmp(class(x),'double')|floor(x)~=x
			error('Function isodd requires a double argument, with all matrix elements integers.');
		end
		k = rem(x,2) ~= 0;
	end %isodd

	function playAgain(varargin)
		restart = verifyRestart;
		if restart
			delete(allButtons);
			delete(bigTitle);
			activeButtonShowsImage = [];
			imNames = imNames(randperm(numel(imNames)));
			[~,~,imnums] = unique(imNames);
			pb = gobjects(numel(imNames),1);
			for ii = 1:numel(imNames)
				[img,map] = imread(imNames{ii});
				if ~isempty(map)
					img = ind2rgb(img,map);
				end
				img = imresize(img,[150 150]);
				[~,~,p] = size(img);
				if p~=3
					img = repmat(img,1,1,3);
				end
				img = im2double(img);
				ud.img = img;
				ud.imnum = imnums(ii);
				pb(ii) = uicontrol('style','pushbutton',...
					'units','normalized',...
					'position',[hobjpos(ii) vobjpos(ii) hobjdim vobjdim],...
					'userdata',ud,...
					'callback',@testForMatch);
				p1Score = 0;
				p2Score = 0;
				set(p1ScoreText,...
					'String',['Player 1 Score: ' num2str(p1Score)])
				set(p2ScoreText,...
					'String',['Player 2 Score: ' num2str(p2Score)])
			end
			allButtons = pb;
			if isTwoPlayer
				bigTitle = uicontrol('style','text',...
					'units','normalized',...
					'position',[0.05 0.95 0.9 0.045],...
					'string','PLAYER 1, it''s your turn!',...
					'fontsize',14,...
					'horizontalalignment','center',...
					'foregroundcolor','r');
			else
				bigTitle = uicontrol('style','text',...
					'units','normalized',...
					'position',[0.05 0.95 0.9 0.045],...
					'string','Make a pick, Matey!',...
					'fontsize',14,...
					'horizontalalignment','center',...
					'foregroundcolor','r');
			end
		end
	end %playAgain

	function testForMatch(obj,varargin)
		currUD = get(obj,'userdata');
		vison(obj,currUD)
		stopit = false;
		if numel(activeButtonShowsImage)==1 && isequal(obj,activeButtonShowsImage)
			stopit = true;
		end
		if ~stopit
			activeButtonShowsImage = [activeButtonShowsImage,obj];
			if numel(activeButtonShowsImage) == 2
				% Immediately, temporarily:
				set(pb,'enable','inactive'); %Disallow additional picks
				drawnow;
				tmp1 = get(activeButtonShowsImage(1),'userdata');
				tmp1val = tmp1.imnum;
				tmp2 = get(activeButtonShowsImage(2),'userdata');
				tmp2val = tmp2.imnum;
				isMatch = tmp1val == tmp2val && ~isequal(activeButtonShowsImage(1),activeButtonShowsImage(2));
				if isMatch
					% MATCH!
					if get(beepon,'value')==1
						beep
					end
					set(activeButtonShowsImage,'enable','inactive')
					pb = setdiff(pb,activeButtonShowsImage);
					if isTwoPlayer
						if playerOnesTurn
							set(bigTitle,'string','Nicely done, Player 1. Go again!')
							p1Score = p1Score + 1;
							set(p1ScoreText,...
								'String',['Player 1 Score: ' num2str(p1Score)])
						else
							set(bigTitle,'string','Nicely done, Player 2. Go again!')
							p2Score = p2Score + 1;
							set(p2ScoreText,...
								'String',['Player 2 Score: ' num2str(p2Score)])
						end
					end %isTwoPlayer
				else % No match
					% autohide
					pause(pauseval)
					visoff(activeButtonShowsImage(1))
					visoff(activeButtonShowsImage(2))
					if isTwoPlayer
						playerOnesTurn = ~playerOnesTurn;
						if playerOnesTurn
							set(bigTitle,'string','PLAYER 1, it''s your turn!','foregroundcolor','r')
						else
							set(bigTitle,'string','PLAYER 2, it''s your turn!','foregroundcolor','b')
						end
					end
				end %isMatch
				gameOver = isempty(pb);
				if gameOver %GAME OVER!
					pv = 0.25;
					for ii = 1:5
						set(allButtons,'visible','on')
						pause(pv)
						set(allButtons,'visible','off')
						pause(pv)
					end
					set(allButtons,'visible','on')
					if isTwoPlayer
						beep
						if p1Score > p2Score
							set(bigTitle,...
								'string','PLAYER 1 WINS!!!','foregroundcolor','r')
						elseif p2Score > p1Score
							set(bigTitle,...
								'string','PLAYER 2 WINS!!!','foregroundcolor','b')
						else
							set(bigTitle,...
								'string','It''s a draw. :-(')
						end
						pause(5)
					end %twoPlayer
					playAgain;
				else
					set(pb,'enable','on');
					activeButtonShowsImage = [];
				end
			end
		end
		
		function visoff(obj)
			set(obj,'cdata',[]);
		end
		
		function vison(obj,currUD)
			set(obj,'cdata',currUD.img);
		end
	end

	function restart = verifyRestart(varargin)
		restart = true;
		if ~isempty(pb) && numel(pb)~=numel(imNames)
			areYouSure = questdlg('You haven''t finished this game. Would you like to restart anyway?','Are you sure?','RESTART','Never mind','RESTART');
			if ~strcmp(areYouSure,'RESTART')
				restart = false;
			end
		end
		disp('A new game is afoot!')
	end

end